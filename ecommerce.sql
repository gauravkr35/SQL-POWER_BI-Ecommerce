
-------------------Data Analysis----------------------

1. List all unique cities where customers are located.

select distinct customer_city from customers;

2. Count the number of orders placed in 2017.

select concat('Total orders placed in 2017 are ',count(order_purchase_timestamp))  from orders
where year(order_purchase_timestamp)=2017 ;

3. Find the total sales per category.

select product_category , round(sum(payment_value),2) as total_sales  from order_items o
join products p
on o.product_id=p.product_id
join payments pm
on pm.order_id=o.order_id
group by product_category
order by total_sales desc

4. Calculate the percentage of orders that were paid in installments.

select round((count(*)/(select count(*) from payments))*100,4) from payments
where payment_installments>=1

5. Count the number of customers from each state. 

SELECT customer_state , count(*) FROM customers
group by customer_state ;

6. Calculate the number of orders per month in 2018.

with cte as (select * ,
case 
when year(order_purchase_timestamp)=2018 then monthname(order_purchase_timestamp)
else 0
end as month_name
 from orders
 )
 select month_name,count(*) from cte
 where month_name!='0'
 group by month_name

  
7. Find the average number of products per order, grouped by customer city.

with cte as (
SELECT orders.order_id ,orders.customer_id,count(orders.order_id) as ord FROM orders
join order_items
on order_items.order_id=orders.order_id
group by orders.order_id,orders.customer_id
)
select customers.customer_city,round(avg(cte.ord),2) from cte
join customers
on customers.customer_id=cte.customer_id
group by customers.customer_city


8. Calculate the percentage of total revenue contributed by each product category.

select upper(product_category) , round((sum(payment_value)/(select sum(payment_value) from payments))*100,2) as revenue from order_items o
join products p
on o.product_id=p.product_id
join payments pm
on pm.order_id=o.order_id
group by product_category
order by revenue desc

9. Calculate the total revenue generated by each seller, and rank them by revenue.

with cte as (
SELECT s.seller_id , sum(price*order_item_id+freight_value) as total FROM sellers s
join order_items o
on s.seller_id=o.seller_id
group by s.seller_id
)
select * ,
rank() over (order by total desc)
 from cte

10. Calculate the cumulative sales per month for each year.

select *,sum(sales) 
over(order by years,months) as commulative_sales
from (
select year(order_purchase_timestamp) as years ,month(order_purchase_timestamp) as months  , sum(payment_value) as sales from orders o
join payments p
on o.order_id=p.order_id
group by years,months
order by years,months
) as temp ;


11. Calculate the year-over-year growth rate of total sales.

select * , lag(sales,1) over() , (sales-lag(sales,1) over())*100/lag(sales,1) over()
from
(
select year(order_purchase_timestamp) as years , sum(payment_value) as sales from orders o
join payments p
on o.order_id=p.order_id
group by years
order by years
) as temp


12. Identify the top 3 customers who spent the most money in each year.

select * from (
select c.customer_id, year(order_purchase_timestamp) as years , sum(payment_value) as total_spend , 
dense_rank() over(partition by year(order_purchase_timestamp) order by sum(payment_value) desc ) as d_rank
from orders o
join payments p
on o.order_id=p.order_id
join customers c
on c.customer_id=o.customer_id
group by c.customer_id , years 
) as temp
where d_rank<=3

